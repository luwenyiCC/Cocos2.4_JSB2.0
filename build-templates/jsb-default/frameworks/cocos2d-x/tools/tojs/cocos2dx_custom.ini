# 模块名称
[cocos2dx_test]

# 绑定回调函数的前缀，也是生成的自动绑定文件的前缀
# 函数名称组合 js + prefix + 头文件中函数名称
prefix = cocos2dx_test

# 绑定的类挂载在 JS 中的哪个对象中，类似命名空间
target_namespace = abc

# 自动绑定工具基于 Android 编译环境，此处配置 Android 头文件搜索路径
android_headers = 

# 配置 Android 编译参数
android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 -gcc-toolchain %(gcc_toolchain_dir)s --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include -I%(cocosdir)s/external/android/arm64-v8a/include/v8

# 配置 clang 头文件搜索路径
clang_headers = 

# 配置 clang 编译参数
clang_flags = -nostdinc -x c++ -std=c++11 -fsigned-char -U__SSE__
 
# 配置引擎的头文件搜索路径
cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/sources  -I%(cocosdir)s/cocos/editor-support 

# 配置引擎编译参数
cocos_flags = -DANDROID
 
cxxgenerator_headers =
 
# 配置额外的编译参数
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# 需要自动绑定工具解析哪些头文件 以空格分隔
headers = %(cocosdir)s/cocos/test/ABCJSBBridge.h

# 在生成的绑定代码中，重命名头文件
replace_headers = 

# 需要绑定哪些类，可以使用正则表达式，以空格为间隔
classes = JSBBridge
 
# 哪些类需要在 JS 层通过 cc.Class.extend，以空格为间隔
classes_need_extend = 

# 需要为哪些类绑定属性，以逗号为间隔
field = ParticleSimulator::[positionType emissionRate totalParticles duration emitterMode life lifeVar startSize startSizeVar endSize endSizeVar startSpin startSpinVar endSpin endSpinVar angle angleVar speed speedVar radialAccel radialAccelVar tangentialAccel tangentialAccelVar rotationIsDir startRadius startRadiusVar endRadius endRadiusVar rotatePerS rotatePerSVar aspectRatio]
 
# 需要忽略绑定哪些类，以逗号为间隔
skip = JSBBridge::[init]
 

remove_prefix = 

# 配置哪些类不需要搜索其父类
classes_have_no_parents = JSBBridge
 
# 配置哪些父类需要被忽略
base_classes_to_skip = Clonable
 
# 配置哪些类是抽象类，抽象类没有构造函数，即在 js 层无法通过 var a = new SomeClass();的方式构造 JS 对象 以空格分隔
abstract_classes = JSBBridge
 
# 重命名函数，以逗号为间隔
rename_functions =	
 
# 重命名类，以逗号为间隔
rename_classes = 
 